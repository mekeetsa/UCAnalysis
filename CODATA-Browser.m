(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(*
   CODATA Browser
   Package for browsing CODATA values
   Author: Mikica B Kocic
   Version: 2.5, 2011-10-15
*)


BeginPackage[ "CodataBrowser`", { "UCQuantity`", "UCAnalysis`" } ];


Begin[ "CodataBrowser`Private`" ];


codataHeader= "CODATA 2010 v6.2";
codataRelease = "Released 30 June 2011";


csvFileName = ToFileName[ { Global`$UcAnalysisRoot, "CODATA" },
  "CODATA-Symbol-Map.csv"
];


If[ ! ListQ[nameMap],
  nameMap = ReadList[ csvFileName, String ];
  nameMap = Function[ line,
    If[ StringQ[ line ], 
      StringSplit[ line, RegularExpression["\\s*\;\\s*"], All ]
    ]
  ] /@ nameMap
];


codataMatchQ[ { name_, comment_ }, pattern_ ] :=
  StringMatchQ[ name, "*" <> pattern <> "*", IgnoreCase -> True ] ||
  StringMatchQ[ comment, "*" <> pattern <> "*", IgnoreCase -> True ];


SearchV[ pattern_ ]:=
Module[
  { str, qty, results, nbGrid, maxResults = 30 },

  str = StringReplace[ pattern, { 
          (StartOfString ~~Whitespace) | (Whitespace ~~ EndOfString) -> "",
          Whitespace.. -> " " 
        } ];

  If[ str === "", Return[ ToBoxes["Enter search pattern, then press enter..."] ] ];

  If[ str === "*", maxResults = Infinity ];

  qty = Cases[ nameMap, e_ /; codataMatchQ[ e, pattern ] :> e[[1]] ];

  results = Table[ 
    Module[ 
      { v, name, nameBox },
      Quiet[ v = CODATA@ Evaluate[ qty[[i]] ] ];

      If [ ! Uc\[ScriptCapitalV]Q[v], (* if not found CODATA for the symbol *)
         v = Uc\[ScriptCapitalV][ "", Null, Null,
                   Name -> qty[[i]], Comment -> "Not found " <> qty[[i]], 
                   Unit -> "", Distribution -> "" 
             ]
      ];

      name = Uc\[ScriptCapitalV]$Option[ v, Name ];

      (* return gridbox row *)
      {
         ButtonBox[
           ToBoxes@ Uc\[ScriptCapitalV]$Option[ v, Comment ],
           BaseStyle->"Hyperlink" ,Alignment->Left,
           ButtonData->{ URL[
             "http://physics.nist.gov/cgi-bin/cuu/Value?" <> name
           ],None }
         ],
         InterpretationBox@@ {
           RowBox[{ Uc\[ScriptCapitalV]$Option[ v, Expression ] }],
           CODATA@@ { name },
           Editable -> False, Selectable -> False
         },
         name,
         UcBox[ v, Condensed -> True ],
         If[ Uc\[ScriptCapitalV]$Option[v, Distribution ] =!= Null,
           (* Then *) ToBoxes[ Uc\[ScriptCapitalV]$Option[ v, Distribution ] ], 
           (* Else *) RowBox[{""}]
         ],
         If[ Uc\[ScriptCapitalV]$Option[v, Unit ] =!= Null,
           (* Then *) Uc\[ScriptCapitalV]$Option[ v, Unit ],
           (* Else *) RowBox[{""}]
         ]
       }
    ],
    { i, Min[ maxResults, Length[qty] ] }
  ];

  If[ Length[results] == 0, 
     Return[ ToBoxes[ "No quantities found." ] ]
  ];

  GridBox[
    {
      Sequence @@ If[ maxResults === Infinity, 
      (* Then *) {},
      (* Else *) {
        { "" },
        { ToBoxes[ ToString[ Length[qty] ] <> 
          " quantities found matching '*" <> str <> "*':" ]
        }
      }],
      {
        GridBox[ results,
          GridBoxAlignment -> {"Columns"->{{Left}}},
          GridBoxFrame -> {"Columns"->{{True}},"Rows"->{{True}}},
          GridBoxItemSize -> {"Columns"->{{Automatic}},"Rows"->{{Automatic}}},
          ColumnsEqual -> False, RowsEqual -> False,
          GridBoxSpacings -> {"Columns"->{{1}},"Rows"->{{0.4}}},
          FrameStyle -> Directive[GrayLevel[0.9`]] 
        ] //.TagBox[ e_,DisplayForm ] :> e
      },
      Sequence @@ If[ Length[qty] <= Length[results] || maxResults === Infinity, 
      (* Then *) {
        { ToBoxes[ "Total " <> ToString[ Length[qty] ] <> 
          " quantities found in database." ]
        }
      }, 
      (* Else *) {
        { StyleBox[ ToBoxes[ "(Query truncated to " <> ToString[ Length[results] ] <> 
          " quantities)" ], FontColor -> Red ] 
        }
      }]
    },
    ColumnAlignments -> {{Left}}
  ]
];


queryWildcards = "";


fontWorking = { FontColor -> Black, FontWeight -> Bold, 
  FontSize -> 14
};


fontPrintout = { FontColor-> RGBColor[0.8,0,0], FontWeight -> Bold, 
  FontSize -> 12, FontFamily -> "Euclid"
};


nb = CreateDocument[
  {
    Cell[
      BoxData[ DynamicBox[ SearchV[queryWildcards] ] ],
      "Input",
      ShowStringCharacters -> False, 
      Editable -> False, Evaluatable -> False, Deletable -> False
    ]
  },
  DockedCells -> Cell[
    BoxData[
      GridBox[
        {
          { 
            RowBox[{""}],
            StyleBox[ "\"Pattern:\"", FontFamily -> "Verdana", FontSize -> Medium ],
            StyleBox[ InputFieldBox[ Dynamic[queryWildcards], String, 
                                     FieldSize -> {30,1.2}, ImageMargins -> 5 ], 
                      FontFamily -> "Verdana", FontSize -> Medium ]
          }
        },
        GridBoxAlignment -> { {{Left}}, {{Baseline}} },
        ColumnSpacings -> { {{1}} }
      ]
    ],
    "DockedCell",
    Editable -> False, Evaluatable -> False,
    CellFrameMargins -> { {10,10}, {10,10} }
  ],
  WindowTitle -> codataHeader <> ", " <> codataRelease,
  WindowSize -> { 1100, 800 },
  Editable -> True,
  Saveable -> False,
  PageHeaders -> 
  {
    { None, None, None },
    { Cell[ TextData[{ codataHeader }],"Header" ], Inherited, Inherited }
  },
  PrintingOptions -> {
    "FacingPages" -> False,
    "FirstPageHeader" -> True,
    "PaperOrientation" -> "Landscape",
    "PrintingMargins" -> {{72,72},{24,48}}
  },
  StyleDefinitions -> Notebook[
    {
      Cell[
        StyleData[StyleDefinitions->"Default.nb"]
      ],
      Cell[
        StyleData[ "Input", "Working" ],
        CellMargins -> { {10,0}, {Inherited,Inherited} },
        FontColor -> Black, FontSize -> 14
      ],
      Cell[
        StyleData[ "TSYMB", "Working" ], Sequence @@ fontWorking
      ],
      Cell[
        StyleData[ "TR", "Working" ], Sequence @@ fontWorking
      ],
      Cell[
        StyleData[ "TI", "Working" ], Sequence @@ fontWorking
      ],
      Cell[
        StyleData[ "Hyperlink", "Working" ],
        ShowStringCharacters -> False, FontFamily -> "Verdana",
        FontWeight -> Plain, FontColor -> Darker[Red],
        FontSize -> 12
      ],
      Cell[
        StyleData[ "Input", "Printout" ], FontColor -> Black, FontSize -> 10.6
      ],
      Cell[
        StyleData[ "TSYMB", "Printout" ], Sequence @@ fontPrintout
      ],
      Cell[
        StyleData[ "TR", "Printout" ], Sequence @@ fontPrintout
      ],
      Cell[
        StyleData[ "TI", "Printout" ],Sequence @@ fontPrintout
      ],
      Cell[
        StyleData[ "Hyperlink", "Printout" ],
        ShowStringCharacters -> False, FontFamily -> "Verdana",
        FontWeight -> Plain, FontColor -> Black,
        FontSize -> 10
      ]
    },
    Visible -> False,
    StyleDefinitions -> "PrivateStylesheetFormatting.nb"
  ]
];


NotebookLocate[ "query" ];


End[];
EndPackage[];
